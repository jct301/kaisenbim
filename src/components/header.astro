---
import { LINKS } from "../constants";
import ThemeToggle from "./theme-toggle.astro";
import LogoIcon from "./icons/logo-icon.astro";
---

<header
  class="sticky top-0 z-10 flex items-center justify-center w-full mx-auto py-4 text-sm"
>
  <nav
    class="flex gap-x-2 xs:gap-x-3 sm:gap-x-4 md:gap-x-6 px-3 sm:px-4 md:px-6 text-sm font-semibold rounded-full justify-center items-center"
  >
    <a
      href="/"
      class="relative block hover:scale-105 transition-transform duration-200"
      ><LogoIcon class="w-8" /></a
    >
    {
      LINKS.map(({ url, title, label }) => (
        <a
          class="relative block transition hover:text-blue-800 dark:hover:text-blue-600 active:text-blue-800 active:dark:text-blue-600"
          href={url}
          aria-label={label}
        >
          {title}
        </a>
      ))
    }
    <ThemeToggle />
  </nav>
</header>

<style>
  nav {
    animation: nav-shadown 1s linear both;
    animation-timeline: scroll();
    animation-range: 0 100px;
  }

  @keyframes nav-shadown {
    to {
      @apply shadow-lg ring-1 backdrop-blur bg-gray-300/60 dark:bg-gray-800/60 ring-white/10;
    }
  }
</style>

<script>
  document.addEventListener("astro:page-load", () => {
    const sections = document.querySelectorAll("section");
    const navItems = document.querySelectorAll("header nav a");

    const callback = (entries: any[]) => {
      entries.forEach((entry) => {
        if (entry.isIntersecting) {
          navItems.forEach((item) => {
            if (item.getAttribute("aria-label") == entry.target.id) {
              item.classList.add("text-blue-700");
            } else {
              item.classList.remove("text-blue-700");
            }
          });
        }
      });
    };

    const observer = new IntersectionObserver(callback, {
      root: null,
      rootMargin: "0px",
      threshold: 0.3,
    });

    sections.forEach((section) => {
      observer.observe(section);
    });

    // Cleanup function
    document.onvisibilitychange = () => {
      if (document.visibilityState === "hidden") {
        observer.disconnect();
      } else {
        sections.forEach((section) => {
          observer.observe(section);
        });
      }
    };
  });
</script>
